# Abstract and unify structured API call sequence
# 1. chained api calls, e.g., m1().m2().m3() ==> m1 -> m2 -> m3
# 2. nested api calls, e.g., m1(m2(), m3()) ==> m2 -> m3 -> m1
# 3. api calls in conditional predicates, e.g., if(m1()) m2 else m3 ==> m1 -> IF{m2}ELSE{m3}
# In this way, we can obviate programming conventions and get a uniform of API usages.
p:Project = input;
seqs: output collection[string] of string;

cur_file: string;
cur_class: string;
cur_method: string;

# API query
api_query : array of string;
api_query = {"createNewFile"};

# type query
type_query : array of string;
type_query = {"File"};

# a coarse-grained query methodology based on a given set of types and apis
query := function(m: Method) : bool{
    # referenced types in a method
    types: set of string;
    # referenced apis in a method
    apis: set of string;
    
    visit(m, visitor{
        before node: Variable -> add(types, node.variable_type.name);
        
        before node: Expression -> {
            if (node.kind == ExpressionKind.METHODCALL) {
                add(apis, node.method);
            }
        }
    });
    
    # API query
    foreach(i : int; def(api_query[i])) {
        if (!contains(apis, api_query[i])) {
            return false;
        }
    }
    
    # type query
    foreach(i : int; def(type_query[i])) {
        if (!contains(types, type_query[i])) {
            return false;
        }
    }
    
    return true;
};

# takes a method call expression and return a method call sequence in the format of m1.m2.m3...
get_method_seq := function(expr: Expression) : string {
    seq: = "";
    st : stack of string;
    
    visit(expr, visitor{
        before node: Expression -> {
            switch (node.kind) {
                case ExpressionKind.METHODCALL:
                    if (def(node.expressions) && len(node.expressions) == 1) {
		                if (node.expressions[0].kind == ExpressionKind.VARACCESS || node.expressions[0].kind == ExpressionKind.LITERAL) {
		                    # This is the first method call in a chain (if any)
		                    
		                    # visit arguments first
		                    if (def(node.method_args)) {
		                        foreach (i: int; def(node.method_args[i])) {
		                            visit(node.method_args[i]);
		                        }
		                    }
		    	            
		    	            # append the first method call
		    	            seq = format("%s->%s", seq, node.method);
		    	            
			                # append the rest of method calls in the sequence, if any
		    	            while (def(peek(st))) {
			                    # method call sequence			                    
			                    seq = format("%s->%s", seq, pop(st));
		    	            }
			                stop;
		                } else if (node.expressions[0].kind == ExpressionKind.METHODCALL) {
		                    # visit arguments first
		                    if (def(node.method_args)) {
		                        foreach (i: int; def(node.method_args[i])) {
		                            visit(node.method_args[i]);
		                        }
		                    }
		                    
                    	    # this is a sequence of method calls
			                push(st, node.method);
			                
			                # visit the following method call(s)
			                visit(node.expressions[0]);
			                stop;
		                }
		            } else if (def(node.expressions) && len(node.expressions) == 0) {
		                # visit arguments first
		                if (def(node.method_args)) {
		                    foreach (i: int; def(node.method_args[i])) {
		                        visit(node.method_args[i]);
		                    }
		                }
		                
		                # local method call
		                seq = format("%s->%s", seq, node.method);
		                
		                # append the rest of method calls in the sequence, if any
		                while (def(peek(st))) {
			                # method call sequence
			                seq = format("%s->%s", seq, pop(st));
		                }
		                stop;
		            }
		            break;
		        case ExpressionKind.NEW:
		            # visit arguments first
		            if (def(node.expressions)) {
		                foreach(i: int; def(node.expressions[i])) {
		                       visit(node.expressions[i]);
		                }
		            }
		            
		            # constructer is always called first in a chain
		            seq = format("%s->new %s", seq, node.new_type.name);
		            
		            while (def(peek(st))) {
		                seq = format("%s->%s", seq, pop(st));
		            }
		            
		            stop;
                default: break;
            }
        }
    });
    
    return seq;
};


traverse_method := function(m: Method) {
    key := format("%s ** %s ** %s ** %s", p.project_url, cur_file, cur_class, cur_method);
    
    stts: string = "";
    
    visit(m, visitor{
        before node: Statement -> {
            switch (node.kind) {
                case StatementKind.IF:
                    # update: no need to include the method calls in if predicates into the api call sequence
                    # since such method calls will be captured by the path condition script
                    # visit(node.expression);
                
                    foreach (i: int; def(node.statements[i])) {
                        if (i == 0) {
                            # visit if branch
                            stts = format("%s->IF {", stts);
                            visit(node.statements[0]);
                            stts = format("%s}", stts);
                        } else if (i == 1) {
                            # visit else branch
                            stts = format("%s->ELSE {", stts);
                            visit(node.statements[1]);
                            stts = format("%s}", stts);
                        } else {
                            # can this even happen? visit silently
                            seqs[key] << "Error: third branch";
                            visit(node.statements[i]);
                        }
                    }
                
                    # no need to visit other elements in the if statement
                    stop;
                case StatementKind.TRY:
                    foreach (i: int; def(node.statements[i])) {
                        if (i == 0) {
                            # visit try block
                            stts = format("%s->TRY {", stts);
                            visit(node.statements[0]);
                            stts = format("%s}", stts);
                        } else if (node.statements[i].kind == StatementKind.CATCH) {
                            # visit catch block, multiple catch? not sure.
                            stts = format("%s->CATCH {", stts);
                            visit(node.statements[i]);
                            stts = format("%s}", stts);
                        } else if (node.statements[i].kind == StatementKind.BLOCK) {
                            stts = format("%s->FINALLY {", stts);
                            visit(node.statements[i]);
                            stts = format("%s}", stts);
                        }
                    }
                
                    stop;
                case StatementKind.FOR:
                    stts = format("%s->LOOP {", stts);
                    foreach (i: int; def(node.statements[i])) {
                        visit(node.statements[i]);
                    }
                    stts = format("%s}", stts);
                    stop;
                case StatementKind.WHILE:
                    stts = format("%s->LOOP {", stts);
                    foreach (i: int; def(node.statements[i])) {
                        visit(node.statements[i]);
                    }
                    stts = format("%s}", stts);
                    stop;
                default: break;
            }
        }
        
        before node: Expression -> {
            switch (node.kind) {
                case ExpressionKind.METHODCALL:
		            stts = format("%s%s", stts, get_method_seq(node));
		            stop;
                case ExpressionKind.NEW:
                    stts = format("%s%s", stts, get_method_seq(node));
                    stop;
                default: break;
            }
        }
    });
    
    seqs[key] << stts;
};

visit(p, visitor {
    # only look at the latest snapshot
    before node: CodeRepository -> {
        # ignore projects with less than 100 revisions
        if (len(node.revisions) < 100) stop;
        
        snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
        foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
    }
    
    # record the current file
    before node: ChangedFile -> {
        cur_file = node.name;
        visit(node, visitor{
            
            # visit class declaration
            before node: Declaration -> {
                # record the class name
                cur_class = node.name;
                
                foreach(i: int; def(node.methods[i])){
                    m := node.methods[i];
                    cur_method = m.name;
                    
                    if (query(m)) {
                        traverse_method(m);
                    }
                }
            }
        });
    }
});
