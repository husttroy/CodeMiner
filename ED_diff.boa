# pwu
# The LCS part is in job/51916
p: Project = input;
ed: output collection[string] of int;
his: output collection[string] of string;
alert: output collection[int] of string;

# Limit investigation to a specific repo.
q_url := "https://github.com/fywb251/bsl_impc_android";
q_file := "cube-android/src/com/foreveross/chameleon/pad/fragment/AboutFragment.java";
old_snapshot: map[string] of ChangedFile;
msg: string;


getStr:= function(file: ChangedFile): string
{
    s := format("\n%s", getast(file));
    s = strreplace(s, " ", "", true);
    return s;
};

diff:= function(s1: string, s2: string) : int
{
    x := splitall(s1, "\n");
    y := splitall(s2, "\n");
    n := len(x);
    m := len(y);
    
    cur : int;
    ru  : int;
    r   : int;
    u   : int;
    
    opt : array of int;
    opt = new(opt, n * m, 0);
    foreach (i:int; def(x[i])) {
        foreach (j:int; def(y[j])) {
            
            cur = i*m + j;
            ru  = i*m - m + j - 1;
            r   = i*m - m + j;
            u   = i*m + j - 1;
            
            if (i!=0 && j!=0) {
                if ( cur >=0 && cur < len(opt) &&
                    ru >= 0 && ru < len(opt) &&
                    r >= 0 && r < len(opt) &&
                    u >= 0 && u < len(opt) ) {
                    
                    if (len(x[i]) == len(y[j]) && hash(x[i]) == hash(y[j])) 
                    {
                        opt[cur] = opt[ru] + 1;
                    } else if (opt[r] > opt[u]) {
                        opt[cur] = opt[r];
                    } else {
                        opt[cur] = opt[u];
                    }

                }
                else {
                    alert[0] << format("[opt overflow] (%d, %d) of (%d, %d)", i, j, n, m);
                }
            }     

    	};
    };

    pos := n * m - 1;
    d := n + m - 2 - 2*opt[pos];
    return d;
    
};
if (match(p.project_url, q_url))
visit(p, visitor {
    
    before node: Revision -> {
	msg = format("%s", node.log); 
    }

    before node: ChangedFile -> {

	if (!match(".*java$", node.name))
	    stop;
	if (!match(q_file, node.name))	#to delete
	    stop;

	if ( (node.kind != FileKind.SOURCE_JAVA_JLS3) &&
		(node.kind != FileKind.SOURCE_JAVA_JLS2) &&
		(node.kind != FileKind.SOURCE_JAVA_JLS4) )
		stop;


	if (node.change == ChangeKind.ADDED) {
	    old_snapshot[node.name] = node;
	}
	else if (node.change == ChangeKind.DELETED) {
	    remove(old_snapshot, node.name);
	}
	else {
	    ed[node.name] << diff(getStr(old_snapshot[node.name]), getStr(node));
	    old_snapshot[node.name] = node;
	    his[node.name] << format("%s", getStr(node));
	}
	stop;
    }
});
