
getStr:= function(file: ChangedFile): array of string
{
    s: string;
    info: string;
    counter: int;
    ast: array of string;

    counter = 0;
    visit(file, visitor {
        before Declaration, Method, Variable, Statement, Expression -> {counter = counter + 2;}
        after Type, Modifier -> 
            {counter ++;}
    });

    emp := "";
    ast = new(ast, counter, emp);

    counter = 0;
    visit(file, visitor {
        before node: Declaration -> {
            ast[counter] = format("Declaration (name: %s, kind: %s) {", node.name, node.kind);
            counter ++;
        }

        before node: Method -> {
            ast[counter] = format("Method (name: %s) {", node.name);
            counter ++;
        }

        before node: Variable -> {
            ast[counter] = format("Variable (name: %s) {", node.name);
            counter ++;
        }

        before node: Statement -> {
            ast[counter] = format("Statement (kind: %s) {", node.kind);
            counter ++;
        }

        before node: Expression -> {
            ast[counter] = format("Expression (kind: %s, literal: %s, method: %s, variable: %s)", node.kind, node.literal, node.method, node.variable);
            counter ++;
        }

        before node: Type -> {
            info = format("Type (%s)", node);
            info = strreplace(info, "  ", " ", true);
            ast[counter] = strreplace(info, "\n", ", ", true);
            counter ++;
            stop;
        }

        before node: Modifier -> {
            info = format("Modifier (%s)", node);
            info = strreplace(info, "  ", " ", true);
            ast[counter] = strreplace(info, "\n", ", ", true);
            counter ++;
            stop;
        }

        after Declaration, Method, Variable, Statement, Expression -> {
            ast[counter] = "}";
            counter ++;
        }

    });

    return ast;
};
