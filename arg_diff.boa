# arg_diff.boa

p: Project = input;
diffs: output collection[string] of string;

files: map[string] of ChangedFile;
checked_methods : set of string;

# Limit investigation to a specific repo.
q_url := "https://github.com/fywb251/bsl_impc_android";
q_file := "cube-android/src/com/foreveross/chameleon/pad/fragment/ChatRoomFragment.java";



compare_methods := function(old_methods: ASTRoot, new_methods: ASTRoot)
{
	nCalls : map[string] of int;

	visit(old_methods, visitor{
		before node: Expression -> {
			if (node.kind == ExpressionKind.METHODCALL) {
				meth_name := node.method;

				if(! def(nCalls[meth_name]))
				{
					nCalls[meth_name] = 1;
				}
				else if(nCalls[meth_name] >= 0)
				{
					nCalls[meth_name] = nCalls[meth_name] + 1;
				}


				# Get all the arguments from this call to this method.
				curr_args : map[int] of string;
				foreach(a : int; def(node.method_args[a]))
				{
					if(node.method_args[a].kind == ExpressionKind.VARACCESS)
					{
						curr_args[a] = node.method_args[a].variable;
					}
					else if(node.method_args[a].kind == ExpressionKind.LITERAL)
					{
						curr_args[a] = node.method_args[a].literal;
					}
					else
					{
						curr_args[a] = "";
					}
				}



				nCallsNew := 0;

				visit(new_methods, visitor{
					before n: Expression -> {
						if(n.kind == ExpressionKind.METHODCALL && (n.method == meth_name))
						{
							nCallsNew = nCallsNew + 1;

							hasDiff := true;
							foreach(i : int; def(n.method_args[i]) && def(curr_args[i]))
							{
								if(n.method_args[i].kind == ExpressionKind.VARACCESS)
									if(n.method_args[i].variable != curr_args[i])
									{
										hasDiff = false;
										diffs[meth_name] << format("In the %d call in the old version, the argument was %s. It was changed to %s in the %d call of the new version.", nCalls[meth_name], curr_args[i], n.method_args[i].variable, nCallsNew);
									}
								else if(n.method_args[i].kind == ExpressionKind.LITERAL)
									if(n.method_args[i].variable != curr_args[i])
									{
										hasDiff = false;
										diffs[meth_name] << format("In the %d call in the old version, the argument was %s. It was changed to %s in the %d call of the new version.", nCalls[meth_name], curr_args[i], n.method_args[i].literal, nCallsNew);
									}
							}
							if(hasDiff)
							{

								diffs[meth_name] << format("There was a complete match for the %dth call in the old version with the %d call in the new version. Please ignore all other matches for the %d call.", nCalls[meth_name], nCallsNew, nCalls[meth_name]);
							}
						}
					}
				});
			}
		}
	});
};

visit(p, visitor {
	before node: CodeRepository -> {
		if(!match(p.project_url, q_url)) 
			stop;
	}
	before node: ChangedFile -> {
		if (!match(node.name, q_file))
			stop;

		if(haskey(files, node.name)) {
			compare_methods(getast(files[node.name]), getast(node));

		}
		if (node.change == ChangeKind.DELETED)
			remove(files, node.name);
		else
			files[node.name] = node;
	}
});
