# fetch dataflow in assignments
p:Project = input;
assignments: output collection[string] of string;

cur_file: string;
cur_class: string;
cur_method: string;

# API query
api_query : array of string;
api_query = {"createNewFile"};

# type query
type_query : array of string;
type_query = {"File"};

# a coarse-grained query methodology based on a given set of types and apis
query := function(m: Method) : bool{
    # referenced types in a method
    types: set of string;
    # referenced apis in a method
    apis: set of string;
    
    visit(m, visitor{
        before node: Variable -> add(types, node.variable_type.name);
        
        before node: Expression -> {
            if (node.kind == ExpressionKind.METHODCALL) {
                add(apis, node.method);
            }
        }
    });
    
    # API query
    foreach(i : int; def(api_query[i])) {
        if (!contains(apis, api_query[i])) {
            return false;
        }
    }
    
    # type query
    foreach(i : int; def(type_query[i])) {
        if (!contains(types, type_query[i])) {
            return false;
        }
    }
    
    return true;
};

# assignment mapping, record the data flow
assign: map[string] of string;

# @expr a expression on the right-hand side of an assignment or a declaration
# @return variable name | api call | literal
append_right_hand := function(left : string, expr : Expression){
    s := "";
    
    v := left;
    
    visit(expr, visitor{
        before node: Expression -> {
            switch (node.kind) {
                case ExpressionKind.METHODCALL:
                    s = format("%s|m::%s", s, node.method);
                    break;
                case ExpressionKind.NEW:
                    s = format("%s|m::new %s", s, node.new_type.name);
                    break;
                case ExpressionKind.VARACCESS:
                    s = format("%s|v::%s", s, node.variable);
                    break;
                case ExpressionKind.LITERAL:
                    s = format("%s|%s", s, node.literal);
                    break;
                default: break;
            }
        }
    });
    
    if (len(s) > 0) {
        if (haskey(assign, v)) {
            assign[v] = format("%s;;;%s", assign[v], s);
        } else {
            assign[v] = s;
        }
    }
};

traverse_method := function(m: Method) {
    key := format("%s ** %s ** %s ** %s", p.project_url, cur_file, cur_class, cur_method);
    
    visit(m, visitor{
        before node: Variable -> {
            if(def(node.initializer)){
                # assignment
                append_right_hand(node.name, node.initializer);
            }
        }
        
        before node: Statement -> {
            if (node.kind == StatementKind.EXPRESSION) {
                if (def(node.expression)) {
                    expr := node.expression;
                    if (expr.kind == ExpressionKind.ASSIGN && len(expr.expressions) == 2) {
                        left := expr.expressions[0];
                        right := expr.expressions[1];
                        if (left.kind == ExpressionKind.VARACCESS) {
                            append_right_hand(left.variable, right);
                        }
                    }
                }
            }
        }
    });
    
    ks := keys(assign);
    if (len(ks) > 0) {
        ss := "";
        foreach (i: int; def(ks[i])) {
            k := ks[i];
            v := assign[k];
            if (len(ss) > 0) {
                ss = format("%s@@%s->%s", ss, k, v);
            } else {
                ss = format("%s->%s", k, v);
            }
        }
        
        if(len(ss) > 0) {
            assignments[key] << ss;
        }
    }
    
    clear(assign);
};

visit(p, visitor {
    # only look at the latest snapshot
    before node: CodeRepository -> {
        # ignore projects with less than 100 revisions
        if (len(node.revisions) < 100) stop;
        
        snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
        foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
    }
    
    # record the current file
    before node: ChangedFile -> {
        cur_file = node.name;
        visit(node, visitor{
            
            # visit class declaration
            before node: Declaration -> {
                # record the class name
                cur_class = node.name;
                
                foreach(i: int; def(node.methods[i])){
                    m := node.methods[i];
                    cur_method = m.name;
                    
                    if (query(m)) {
                        traverse_method(m);
                    }
                }
            }
        });
    }
});
