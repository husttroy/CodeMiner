# fetch receivers of API calls
p:Project = input;
receivers: output collection[string] of string;

cur_file: string;
cur_class: string;
cur_method: string;

# API query
api_query : array of string;
api_query = {"createNewFile"};

# type query
type_query : array of string;
type_query = {"File"};

# a coarse-grained query methodology based on a given set of types and apis
query := function(m: Method) : bool{
    # referenced types in a method
    types: set of string;
    # referenced apis in a method
    apis: set of string;
    
    visit(m, visitor{
        before node: Variable -> add(types, node.variable_type.name);
        
        before node: Expression -> {
            if (node.kind == ExpressionKind.METHODCALL) {
                add(apis, node.method);
            }
        }
    });
    
    # API query
    foreach(i : int; def(api_query[i])) {
        if (!contains(apis, api_query[i])) {
            return false;
        }
    }
    
    # type query
    foreach(i : int; def(type_query[i])) {
        if (!contains(types, type_query[i])) {
            return false;
        }
    }
    
    return true;
};

rs: map[string] of string;

traverse_method := function(m: Method) {
    key := format("%s ** %s ** %s ** %s", p.project_url, cur_file, cur_class, cur_method);
    
    visit(m, visitor{
        before node: Expression -> {
            mName := "";
            
            switch (node.kind) {
                case ExpressionKind.METHODCALL:
                    mName = node.method;
                    
		            if (def(node.expressions) && len(node.expressions) == 1) {
		                if (node.expressions[0].kind == ExpressionKind.VARACCESS) {
		                    v := node.expressions[0].variable;
		                    if (haskey(rs, mName)) {
		                        rs[mName] = format("%s;;;v::%s", rs[mName], v);
		                    } else {
		                        rs[mName] = format("v::%s", v);
		                    }
		                } else if (node.expressions[0].kind == ExpressionKind.METHODCALL) {
		                    mc := node.expressions[0].method;
		                    if (haskey(rs, mName)) {
		                        rs[mName] = format("%s;;;m::%s", rs[mName], mc);
		                    } else {
		                        rs[mName] = format("m::%s", mc);
		                    }
		                }
		            }
	                
		            break;
                default: break;
            }
        }
    });
    
    ks := keys(rs);
    if (len(ks) > 0) {
        ss := "";
        foreach (i: int; def(ks[i])) {
            k := ks[i];
            v := rs[k];
            if (len(ss) > 0) {
                ss = format("%s@@%s->%s", ss, k, v);
            } else {
                ss = format("%s->%s", k, v);
            }
        }
        
        if(len(ss) > 0) {
            receivers[key] << ss;
        }
    }
    
    clear(rs);
};

visit(p, visitor {
    # only look at the latest snapshot
    before node: CodeRepository -> {
        # ignore projects with less than 100 revisions
        if (len(node.revisions) < 100) stop;
        
        snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
        foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
    }
    
    # record the current file
    before node: ChangedFile -> {
        cur_file = node.name;
        visit(node, visitor{
            
            # visit class declaration
            before node: Declaration -> {
                # record the class name
                cur_class = node.name;
                
                foreach(i: int; def(node.methods[i])){
                    m := node.methods[i];
                    cur_method = m.name;
                    
                    if (query(m)) {
                        traverse_method(m);
                    }
                }
            }
        });
    }
});
